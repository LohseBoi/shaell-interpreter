fn TestStringOp()
    A:assert("a" + "b" == "ab", "String concatenation through + operator")
    A:assert("2" + 1 == "21", "String concatenation through + operator")
    A:assert(1 + "2" == "12", "String concatenation through + operator")

    A:assert("ab" * 2 == "abab", "String repetition through * operator")
    A:assert("ab" * 0 == "", "String repetition through * operator")
    A:assert(2 * "ab" == "abab", "String repetition through * operator")
    A:assert(0 * "a" == "", "String repetition through * operator")
end

fn TestNumberOp()
    A:assert(1 + 2 == 3, "Number addition through + operator")
    A:assert(1 - 2 == -1, "Number subtraction through - operator")
    A:assert(1 * 2 == 2, "Number multiplication through * operator")
    A:assert(2 / 2 == 1, "Number division through / operator")
    A:assert(1 / 2 == 0.5, "Number division through / operator")
    A:assert(2 % 2 == 0, "Number modulo through % operator")
    A:assert(4 % 3 == 1, "Number modulo through % operator")
    A:assert(2 ** 3 == 8, "Number exponentiation through ^ operator")
end

fn TestCompoundExpr()
    let value = 5
    value += 10
    A:assert(value == 15, "Number addition through += operator")
    value -= 10
    A:assert(value == 5, "Number subtraction through -= operator")
    value *= 2
    A:assert(value == 10, "Number multiplication through *= operator")
    value /= 2
    A:assert(value == 5, "Number division through /= operator")
    value %= 2
    A:assert(value == 1, "Number modulo through %= operator")
    value **= 2
    A:assert(value == 1, "Number exponentiation through **= operator")
    let string = "a"
    string += "b"
    A:assert(string == "ab", "String concatenation through += operator")
end    

A:describe("Test strings", TestStringOp)
A:describe("Test numbers", TestNumberOp)
A:describe("Test compound expressions", TestCompoundExpr)